import { createStore } from 'vuex'
// Vuex - паттерн управления состоянием + библиотека для приложений на Vue.js
// Данные, объявленные в этом хранилище, доступны всем компонентам
// Метод createStore создает экземпляр Vuex
// В метод передаем объект с настройками (благодаря которым компоненты смогут обращаться к хранилищу)
// При обновлении страницы хранилище приходит к своему первоначальному виду
export default createStore({
  // состояние (хранимые данные)
  state: { // доступ в компоненте: this.$store.state
    products: [ // доступ в компоненте: this.$store.state.products
      {
        id: 1,
        title: "Пианино",
        description: "Клавишный струнный музыкальный инструмент с ударным (молоточковым) способом звукоизвлечения, " +
            "созданный специально для комнатного музицирования в небольших помещениях. Пианино представляет собой " +
            "уменьшенную по размеру разновидность фортепиано, в которой струны, дека и механическая часть расположены " +
            "вертикально, а не горизонтально, вследствие чего пианино занимает гораздо меньше места, чем рояль.",
        price: 3000,
        count: 0,
        image: "piano.jpeg"
      },
      {
        id: 2,
        title: "Гитара",
        description: "Струнный щипковый музыкальный инструмент. Применяется в качестве аккомпанирующего или сольного " +
            "инструмента во многих стилях и направлениях музыки, среди которых романс, блюз, кантри, фламенко, рок, джаз." +
            " Изобретённая в XX веке электрическая гитара произвела значительные изменения в музыке и тем самым оказала " +
            "сильное влияние на массовую культуру. Также есть классическая гитара, гитара фламенко, испанская гитара " +
            "и некоторые другие виды.",
        price: 1200,
        count: 40,
        image: "guitar.jpeg"
      },
      {
        id: 3,
        title: "Барабаны",
        description: "Музыкальный инструмент из семейства ударных. Распространён у большинства народов, используется в " +
            "составе многих музыкальных ансамблей.Исполнитель на барабане — барабанщик.Типичным представителем является" +
            " мембранный барабан, состоящий из полого корпуса - резонатора определённой формы или рамы, на которую натянута " +
            "кожаная или пластиковая мембрана. Её натяжением регулируется относительная высота звука. Корпус барабана " +
            "производится из дерева, металла(стали, латуни), акрилового пластика или даже глины.",
        price: 2700,
        count: 12,
        image: "drum.jpeg"
      },
      {
        id: 4,
        title: "Флейта",
        description: "Лабиальный духовой музыкальный инструмент, в котором первичным источником колебаний является " +
            "воздушная струя, рассекающаяся о край стенки инструмента, называемого лабиум (лат. labium — губа). " +
            "Источник колебаний приводит в движение воздушный столб в канале флейты и образуется звук определённой высоты. " +
            "Один из древнейших музыкальных инструментов. Относится к группе деревянных духовых.",
        price: 900,
        count: 50,
        image: "flute.jpeg"
      },
      {
        id: 5,
        title: "Арфа",
        description: " струнный щипковый музыкальный инструмент, состоит из двух расположенных под углом рам, между " +
            "которыми натянуто множество струн. Один из древнейших инструментов, символ Ирландии. В XVIII столетии была " +
            "изобретена педальная арфа, ставшая стандартом в классической музыке.",
        price: 3400,
        count: 5,
        image: "harp.jpeg"
      }
    ],
    // корзина для товаров
    // доступ в компоненте: this.$store.state.basket
    basket: [],
  },
  // геттеры для фильтрации данных из state (возвращают отфильтрованные данные из state)
  // геттеры не меняют state
  // доступ: this.$store.getters
  getters: {},
  // мутации - методы для изменения данных из state
  // (например, добавление и удаление товара из корзины)
  // мутации не могут быть асинхронными!
  mutations: {
    // добавление товара
    addToBasket(state, products) {
      if (state.basket[products.id]) {
        state.basket[products.id] += 1;
        products.count -= 1;
      } else {
        state.basket[products.id] = 1;
        products.count -= 1;
      }
    },
    // удаление товара
    deleteFromBasket(state, products) {
      if (state.basket[products.id] > 1) {
        state.basket[products.id] -= 1;
        products.count += 1;
      } else {
        delete state.basket[products.id];
        products.count += 1;
      }
    },
  },
  actions: {},
  modules: {}
})

